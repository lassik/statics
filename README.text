= Statics


== Type system

'a 'b 'c ... are type variables

(values ...) is the type of all tuples with the given element types

(procedure ...) is the type of all procedures passing the given types


== Primitive types

exact

inexact

string

(vector 'a)

(port 'a)


== Standard derived types

(define-type-alias bytevector (vector (unsigned 8)))

(define-union-type boolean
  (false)
  (true))

(define-union-type (list 't)
  (null)
  (pair 't (list 't)))

(define-union-type (maybe 'a)
  (nothing)
  (just 'a))

(define-union-type (either 'a 'b)
  (left 'a)
  (right 'b))


== Read syntax

'() is sugar for (null), the empty list constructor.

'(1 2 3) is sugar for (cons 1 (cons 2 (cons 3 ())))

(foo) is sugar for (apply foo (values))

(foo a b c) is sugar for (apply foo (values a b c))


== Syntax (essentials)

(define-static-library <library-name>
  (export <export*>)
  (import <import*>)
  (begin <expression+>))

(define-group <definition*>)
  Make definitions that reference each other.

(define <identifier> <expression>)
  Define a value assigned once.

(define-values (<identifier+>) <expression>)
  Define multiple values assigned once by unpacking from a tuple.

(define (<identifier> <identifier*>) <expression+>)
  Shorthand to define a procedure.
  The identifiers are an implicit tuple.

(lambda <identifier> <expression+>)
  Make a closure and return it.
  In Statics, every procedure takes one tuple and returns one tuple.
  In the case of a 1-tuple, the tuple-ness is hidden from the user.
  In Scheme (lambda x ...) puts the whole arg list in x.
  In Statics (lambda x ...) puts the whole arg tuple in x.

(lambda (<binding*>) <expression+>)
  Shorthand for (lambda g
                  (match g
                    ((values <binding*>)
                     <expression+>)))

(let <identifier> (<binding*>) <expression+>)
  Shorthand to locally define a recursive procedure
  and call it with initial values.

(let (<binding*>) <expression+>)

(let* (<binding*>) <expression+>)

(if <expression> <expression> <expression>)

(cond <cond-clause+>)

(match <expression> <match-clause+>)

(match-lambda <match-clause+>)

Subexpressions:

<binding> = (<identifier> <expression>)

<cond-clause> = (else|<expression> <expression+>)

<match-clause> = (<selector> <expression+>)

<selector>
  = (values <selector*>)            select n-tuple and unpack it
  | (vector <selector*>)            select n-vector and unpack it
  | (list <selector*>)              select n-list and unpack it
  | (cons <selector> <selector>)    select list, unpack head and tail
  | (cons* <selector*> <selector>)  select list, unpack n first and tail
  | (<identifier> <selector*>)      select constructor, unpack tuple
  | <identifier>                    any value, bind to variable
  | else                            any value, do not bind


== Syntax (operators)

(values <expression*>)
(vector <expression*>)
(list <expression*>)

Construct an n-tuple, a list, or a vector, from the given elements.

The zero-argument case constructs a 0-tuple, an empty list, or an
empty vector. A 0-tuple is the unit value of Statics.

(apply <expression> <expression>)

The first expression must evaluate to a function; the second one to a
tuple. The function is applied to the tuple and one value is returned.

(+ <expression*>)

Add numbers.
One-argument case returns the number itself.
Zero-argument case returns 0.
Identifier syntax returns a procedure that adds two numbers.

(* <expression*>)

Multiply numbers.
One-argument case returns the number itself.
Zero-argument case returns 1.
Identifier syntax returns a procedure that multiplies two numbers.

(- <expression*>)

Subtract numbers.
One-argument case returns negation.
Zero-argument case is an error.
Identifier syntax returns a procedure that subtracts two numbers.

(/ <expression*>)

Divide numbers.
One-argument case returns reciprocal.
Zero-argument case is an error.
Identifier syntax returns a procedure that divides two numbers.

(string-append <expression*>)
(vector-append <expression*>)
(append <expression*>)

Concatenate strings, vectors, or lists.
The zero-argument case returns "", #(), or '(), respectively.
Identifier syntax returns a procedure that concatenates two things.
